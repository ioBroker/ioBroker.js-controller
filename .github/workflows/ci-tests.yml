name: CI
on:
  push:
    branches:
      - master
      - 4.0.x
    tags: # for automatic releases
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request:
  schedule:
    - cron: '0 0 * * 0' # weekly

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Eslint
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: NPM install
        run: npm i --ignore-scripts # install typescript and @types do not `setup first`

      - name: Eslint
        run: npm run lint

  ci:
    name: ${{ matrix.os }} on node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-latest]
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Prepare installation (Linux)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo add-apt-repository ppa:chris-lea/redis-server -y
          sudo apt-get update -q
          sudo apt-get install redis-server redis-sentinel -y
          sudo systemctl start redis-server

      - name: Prepare installation (MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          # temporary ignore brew problems
          brew install redis || true
          ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
          launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist

      - name: Prepare installation (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install redis-64 --version 3.0.503
          powershell "Start-Process redis-server.exe -PassThru"

      - name: NPM version
        run: npm -v

      - name: Install dependencies
        run: npm ci --ignore-scripts # install typescript and @types do not `setup first`

      - name: Build TS files
        run: npm run build

      - name: Run scripts
        run: npm run preinstall && npm run install

      - name: Execute Type Tests
        run: npm run test-types

      - name: Execute Standard Tests
        run: npm test

      - name: Execute Jsonl Tests
        run: npm run test-jsonl

      - name: Redis Socket/Sentinel Tests (Linux)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo chmod ogu+x packages/controller/test/redis-socket/setup-socket.sh
          sudo chmod ogu+x packages/controller/test/redis-sentinel/*.sh
          packages/controller/test/redis-socket/setup-socket.sh
          cd packages/controller/test/redis-sentinel
          ./test-sentinel.sh

  auto-merge:
    if: |
      always() &&
      github.event_name == 'pull_request'
    needs: [ ci ]
    runs-on: ubuntu-latest
    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.15.6"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "automated pr"
          MERGE_FILTER_AUTHOR: "foxriver76"
          MERGE_FORKS: "false"
          MERGE_DELETE_BRANCH: "false"
          UPDATE_LABELS: "automated pr"
          MERGE_METHOD: "squash"

      - name: Checkout repository
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/checkout@v3

      - name: Use Node.js 16
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Determine version
        if: steps.automerge.outputs.mergeResult == 'merged'
        id: version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            return require(`${process.env.GITHUB_WORKSPACE}/lerna.json`).version;

      - name: Install dependencies
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: npm ci --ignore-scripts # install typescript and @types do not `setup first`

      - name: Build TS files
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: npm run build

      - name: Publish npm
        if: steps.automerge.outputs.mergeResult == 'merged'
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami

          npx lerna publish from-package --yes --dist-tag dev

      - name: Create Github Release for Nightly
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.version.outputs.result }}
          name: Release v${{ steps.version.outputs.result }}
          draft: false
          prerelease: true
          body: 'nightly release'

      - name: Notify Sentry.io about the Nightly release
        if: steps.automerge.outputs.mergeResult == 'merged'
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          npm i -g @sentry/cli
          export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          export SENTRY_URL=https://sentry.iobroker.net
          export SENTRY_ORG=iobroker
          export SENTRY_PROJECT=iobroker-js-controller
          export SENTRY_VERSION=iobroker.js-controller@${VERSION}
          sentry-cli releases new $SENTRY_VERSION
          sentry-cli releases set-commits $SENTRY_VERSION --auto
          sentry-cli releases finalize $SENTRY_VERSION

  # Deploys the final package to NPM when a versioned tag was pushed
  deploy:
    needs: [ci]

    # Trigger this step only when a commit on any branch is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Extract the version and commit body from the tag
        id: extract_release
        # The body may be multiline, therefore newlines and % need to be escaped
        run: |
          VERSION="${{ github.ref }}"
          VERSION=${VERSION##*/v}
          echo "::set-output name=VERSION::$VERSION"
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Install dependencies
        run: npm ci --ignore-scripts # install typescript and @types do not `setup first`

      - name: Build TS files
        run: npm run build

      - name: Publish package to npm
        env:
          PRERELEASE: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          if [[ "$PRERELEASE" == "true" ]]; then
            npx lerna publish from-package --yes next
          else
            npx lerna publish from-package --yes
          fi

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.extract_release.outputs.VERSION }}
          draft: false
          # Prerelease versions create prereleases on GitHub
          prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}

      - name: Notify Sentry.io about the release
        run: |
          npm i -g @sentry/cli
          export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          export SENTRY_URL=https://sentry.iobroker.net
          export SENTRY_ORG=iobroker
          export SENTRY_PROJECT=iobroker-js-controller
          export SENTRY_VERSION=iobroker.js-controller@${{ steps.extract_release.outputs.VERSION }}
          sentry-cli releases new $SENTRY_VERSION
          sentry-cli releases set-commits $SENTRY_VERSION --auto
          sentry-cli releases finalize $SENTRY_VERSION
