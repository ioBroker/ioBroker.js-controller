name: Publish nightly dev releases

on:
  schedule:
    - cron: 0 2 * * * # Every day at 02:00
  workflow_dispatch: # Manually on demand

jobs:
  publish-config:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x] # This should be LTS

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Fetch the history, or this action won't work

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.5.1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Detect changes (git)
      id: changes
      run: |
        # ===============================
        # Detect changes using git
        # ===============================

        LAST_TAG=$(git describe --abbrev=0 --tags)
        echo "Checking for changes since last tag $LAST_TAG"

        # Figure out if anything changed in the package directories
        CHANGES=$(git diff "$LAST_TAG" --name-only | grep -E "^packages\/" || true)
        if [ -z "$CHANGES" ] ; then
          echo "ðŸ”¸ No package changes since latest version, aborting..."
          echo "::set-output name=result::unchanged"
        else
          echo "::set-output name=result::ok"
        fi

    - name: Prepare installation
      if: steps.changes.outputs.result == 'ok'
      run: |
        sudo add-apt-repository ppa:chris-lea/redis-server -y
        sudo apt-get update -q
        sudo apt-get install redis-server redis-sentinel -y
        sudo systemctl start redis-server

    - name: Install dependencies
      if: steps.changes.outputs.result == 'ok'
      run: npm ci --ignore-scripts # install typescript and @types do not `setup first`

    - name: Build TS files
      if: steps.changes.outputs.result == 'ok'
      run: npm run build

    - name: Run scripts
      if: steps.changes.outputs.result == 'ok'
      run: npm run preinstall && npm run install

    - name: Test
      if: steps.changes.outputs.result == 'ok'
      run: npm test

    - name: Determine the version bump
      if: steps.changes.outputs.result == 'ok'
      id: version
      uses: actions/github-script@v5
      with:
        result-encoding: string
        script: |
          const semver = require("semver");
          const now = new Date();
          const today = new Date(now.getTime() - now.getTimezoneOffset()*60000);
          const dateStr = today.toISOString().split("T")[0].replace(/-/g, "");
          const sha = require("child_process").execSync("git rev-parse --short HEAD").toString("utf8").trim();

          const prevVersion = require(`${process.env.GITHUB_WORKSPACE}/lerna.json`).version;

          const parsed = semver.parse(prevVersion);
          const prereleaseIdentifier = parsed.prerelease[0] || "alpha";

          for (let i = 1; i < parsed.prerelease.length; i++) {
            const part = parsed.prerelease[i];
            if (typeof part === "number") {
              continue;
            }
            // Parse stuff like `8-20210909-001a711c` back to `8`
            const numeric = parseInt(part);
            if (!Number.isNaN(numeric)) {
              parsed.prerelease[i] = numeric;
            }
          }

          // Figure out the next version
          const nightlyVersion =  `${semver.inc(parsed, "prerelease", prereleaseIdentifier)}-${dateStr}-${sha}`;

          // ensure that io-pack is in sync
          const fs = require('fs');
          const ioPack = JSON.parse(fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/packages/controller/io-package.json`));
          ioPack.common.version = semver.inc(nightlyVersion, 'patch');;
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}packages/controller/io-package.json`, JSON.stringify(ioPack, null, 2));

          return nightlyVersion;

    - name: Bump version and publish
      if: steps.changes.outputs.result == 'ok'
      env:
        VERSION: ${{ steps.version.outputs.result }}
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        npm whoami

        git config --global user.email "moritz.heusinger@gmail.com"
        git config --global user.name "Github Action"

        npx lerna version ${VERSION} --exact --ignore-scripts --no-commit-hooks --yes
        npx lerna publish from-package --yes --dist-tag dev

    - name: Create Github Release
      if: steps.changes.outputs.result == 'ok'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.result }}
        release_name: Release v${{ steps.version.outputs.result }}
        draft: false
        prerelease: true
        body: 'nightly release'

    - name: Notify Sentry.io about the release
      if: steps.changes.outputs.result == 'ok'
      env:
        VERSION: ${{ steps.version.outputs.result }}
      run: |
        npm i -g @sentry/cli
        export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        export SENTRY_URL=https://sentry.iobroker.net
        export SENTRY_ORG=iobroker
        export SENTRY_PROJECT=iobroker-js-controller
        export SENTRY_VERSION=iobroker.js-controller@${VERSION}
        sentry-cli releases new $SENTRY_VERSION
        sentry-cli releases set-commits $SENTRY_VERSION --auto
        sentry-cli releases finalize $SENTRY_VERSION
